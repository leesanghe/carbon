<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>동네 전력 예측</title>

    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.js"></script>
</head>
<body>



  <%@include file="/WEB-INF/inc/top.jsp" %>

    <div style="margin-top: 120px;"> <!-- Adjust the value based on your navigation bar's height -->
        <!-- 년도 선택 -->
        <label for="yearSelect">년도 선택: </label>
        <select id="yearSelect">
            <c:forEach var="yearItem" items="${years}">
                <option value="${yearItem}" ${yearItem eq year ? 'selected' : ''}>${yearItem}</option>
            </c:forEach>
        </select>

        <!-- 지역 시 선택 -->
        <label for="metroSelect">지역 시 선택: </label>
        <select id="metroSelect" >
            <c:forEach var="metroItem" items="${metros}">
                <option value="${metroItem}" ${metroItem eq metro ? 'selected' : ''}>${metroItem}</option>
            </c:forEach>
        </select>

        <!-- 지역(군,구) 선택 -->
        <label for="citySelect">지역(군,구) 선택: </label>
        <select id="citySelect">
            <c:forEach var="cityItem" items="${cities}">
                <option value="${cityItem}" ${cityItem eq city ? 'selected' : ''}>${cityItem}</option>
            </c:forEach>
        </select>

    </div>
    <div  id="chartContainer" style="width: 900px; height: 500px;">
    	<canvas id="monthlyChart" style="width: 100%; height: 100%;"></canvas>  
    </div>
  
    <div>
        <label for="goalPercentageSelect">목표량 설정하기:</label>
        <select id="goalPercentageSelect">
            <option value="10">10%</option>
            <option value="20">20%</option>
            <option value="30">30%</option>
        </select>

        <p id="predictionInfo"></p>
    </div>

<script>

$(document).ready(function () {
	
	var selectedYear, selectedMetro, selectedCity; 
     // 초기 그래프 생성
     var monthlyChart = createChart([], [], []);

     // 셀렉트 박스의 값이 변경될 때 이벤트 리스너 등록
     $('#yearSelect, #metroSelect, #citySelect').change(function () {
         // 각 셀렉트 박스의 선택된 값 가져오기
          selectedYear = $('#yearSelect').val();
          selectedMetro = $('#metroSelect').val();
          selectedCity = $('#citySelect').val();

         // 콘솔에 출력
         console.log("Selected Year: " + selectedYear);
         console.log("Selected Metro: " + selectedMetro);
         console.log("Selected City: " + selectedCity);
         var json_data = {
             year: selectedYear,
             metro: selectedMetro
         };

         // AJAX를 이용하여 서버로 도시 목록을 요청
         $.ajax({
             type: 'POST',
             url: '<c:url value="/getCities" />',
             dataType: 'json',
             contentType: 'application/json',
             data: JSON.stringify(json_data),
             success: function (data) {
                 console.log(data);
                 var citySelect = $('#citySelect');
                 var previouslySelectedCity = citySelect.val();

                 citySelect.empty();
                 $.each(data, function (index, city) {
                     citySelect.append('<option value="' + city + '">' + city + '</option>');
                 });

                 // 이전에 선택된 도시를 다시 선택
                 citySelect.val(previouslySelectedCity);

                 // 그래프 업데이트 함수 호출
                 updateChart(monthlyChart, selectedYear, selectedMetro, selectedCity);
             },
             error: function () {
                 console.error('Failed to get city data.');
             }
         });
     });

     // 초기 그래프 생성 함수
     function createChart(labels, data, predictedData) {
         var ctx = document.getElementById('monthlyChart').getContext('2d');
         var chart = new Chart(ctx, {
             type: 'line',
             data: {
                 labels: labels,
                 datasets: [
                     {
                         label: '월별 전력 소비량',
                         data: data,
                         borderColor: 'rgba(75, 192, 192, 1)',
                         borderWidth: 1,
                         fill: false
                     },
                     {
                         label: '예측된 전력 소비량',
                         data: predictedData,
                         borderColor: 'rgba(255, 99, 132, 1)',
                         borderWidth: 1,
                         fill: false
                     }
                 ]
             },
             options: {
                 scales: {
                     x: [{
                         type: 'category',
                         labels: labels
                     }],
                     y: [{
                         ticks: {
                             beginAtZero: true
                         }
                     }]
                 }
             }
         });

         return chart;
     }
     

     

     // 그래프 업데이트 함수
     function updateChart(chart, year, metro, city) {
         var json_data = {
             year: year,
             metro: metro,
             city: city
         };

         // AJAX를 이용하여 서버로 월별 데이터 요청
         $.ajax({
             type: 'POST',
             url: '<c:url value="/getMonthData" />',
             dataType: 'json',
             contentType: 'application/json',
             data: JSON.stringify(json_data),
             success: function (data) {
                 console.log(data);

                 // 기존 데이터 초기화
                 chart.data.labels = [];
                 chart.data.datasets[0].data = [];
                 chart.data.datasets[1].data = [];

                 // 새로운 데이터로 업데이트
                 chart.data.labels = data.predictedMonths;
                 chart.data.datasets[0].data = data.data;
                 chart.data.datasets[1].data = data.predictedPowerUsage;

                 // 그래프 업데이트
                 chart.update();
                 

                 
             },
             error: function () {
                 console.error('Failed to get month data.');
             }
         });
         
     }
     // 추가: 전력 예측 정보 업데이트 함수
  

	$('#goalPercentageSelect').change(function () {
	    var selectedPercentage = $(this).val();
	    // 추가: 평균 전력 사용량 업데이트
	    console.log("Before updateAveragePowerUsage - Selected Year: " + selectedYear);
	    console.log("Before updateAveragePowerUsage - Selected Metro: " + selectedMetro);
	    console.log("Before updateAveragePowerUsage - Selected City: " + selectedCity);

	    updateAveragePowerUsage(selectedYear, selectedMetro, selectedCity);

	    console.log("After updateAveragePowerUsage - Selected Year: " + selectedYear);
	    console.log("After updateAveragePowerUsage - Selected Metro: " + selectedMetro);
	    console.log("After updateAveragePowerUsage - Selected City: " + selectedCity);
	    
	    updatePredictionInfo(selectedPercentage);
	});

     
	// 추가: 평균 전력 사용량 업데이트 함수
	function updateAveragePowerUsage(year, metro, city) {
		console.log("update함수 호출됨")
	    var json_data = {
	        year: year,
	        metro: metro,
	        city: city
	    };
	
	    $.ajax({
	        type: 'POST',
	        url: '<c:url value="/getAverageYearAndMetroAndCities" />',
	        dataType: 'json',
	        contentType: 'application/json',
	        data: JSON.stringify(json_data),
	        success: function (data) {
	            console.log(data);
	
	            // 가져온 데이터를 텍스트로 표시
	            var averagePowerUsage = data// 수정
	            averagePowerUsage =  parseFloat(data).toFixed(2);
	            var averagePowerUsageText = "평균 전력 사용량: " + averagePowerUsage;
	            // HTML 엘리먼트에 적용
	            $("#averagePowerUsageInfo").html(averagePowerUsageText);
	            //
	            updatePredictionInfo(year, metro, city ,averagePowerUsage, $('#goalPercentageSelect').val());
	        },
	        error: function () {
	            console.error('Failed to get average power usage data.');
	        }
	    });
	}
	
	// 추가: 전력 예측 정보 업데이트 함수
	function updatePredictionInfo(year, metro, city, averagePowerUsage, selectedPercentage) {
	    var goalAmount = averagePowerUsage - (selectedPercentage / 100) * averagePowerUsage;
	    goalAmount = parseFloat(goalAmount).toFixed(2)
	    var carbonPoints = calculateCarbonPoints(averagePowerUsage, selectedPercentage);
	
	    // 목표량과 전력 예측 정보를 텍스트로 표시
	    var predictionInfoText = year+"년" + metro+ " " + city + " 평균 전력 예측 사용량은 " + averagePowerUsage + "입니다.<br>" +
	        selectedPercentage + "% 절약한 전력량은 " + goalAmount + "이며, 과거와 비교해서 " + selectedPercentage + "% 절약하여<br>" +
	        "받을 수 있는 탄소 포인트는 " + carbonPoints + "P입니다." + "<br>" +
	        "<button onclick=\"goToCarbonPointSolution()\">탄소포인트 솔루션알아보러가기</button>" +
	        "<button onclick=\"goToCarbonPointInfo()\">탄소포인트알아보러가기</button>";
	
	    // HTML 엘리먼트에 적용
	    $("#predictionInfo").html(predictionInfoText);
	}
     
    // calculateCarbonPoints 함수 정의
    function calculateCarbonPoints(averagePowerUsage, selectedPercentage) {
        var goalAmount = (selectedPercentage / 100) * averagePowerUsage;
        var fixedGoalAmounts = {        
        		10: 10000,
                20: 15000,
                30: 20000
        
    };
    
    var fixedGoalAmount = fixedGoalAmounts[selectedPercentage];
    
    
     return fixedGoalAmount ; // 예: 목표량 * 1000
	}
    
 });
</script>
 <button id="moveToOtherPage">보고서 페이지 이동</button>

	<script>
	    // 버튼 클릭 시 이벤트 처리
	    document.getElementById('moveToOtherPage').addEventListener('click', function () {
	        // 새로운 페이지의 URL로 이동
	        window.location.href = 'https://example.com'; // 원하는 URL로 변경
	    });
	</script>
	 

    <%@include file="/WEB-INF/inc/footer.jsp" %>

</body>
</html>